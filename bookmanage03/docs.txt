
1、模型类　需要继承自 models.Model
2、定义属性
    id 系统默认会生成
    属性名 = models.类型(选项)
    2.1属性名　对应　就是字段名
    2.2类型　MySQL的类型
    2.3选项　默认值、唯一、null
3、改变表的名称：
    默认表的名称是：子应用名_类名　都是小写
    修改表的名字

模型迁移
python manage.py makemigrations     #生成迁移文件
python manage.py migrate            #执行迁移文件

测试数据
insert into bookinfo(name,pub_date,read_count,comment_count,is_delete) values('射雕英雄传','1980-5-1',12,34,0),('天龙八部','1986-2-11',36,40,0),('笑傲江湖','1995-12-21',20,20,0),('雪山飞狐','1987-11-11',58,24,0);
insert into peopleinfo(name,gender,description,is_delete,book_id) values('郭靖',1,'降龙十八掌',0,1),('黄蓉',0,'打狗棍法',0,1),('黄药师',1,'弹指神通',0,1),('欧阳锋',1,'蛤蟆功',0,1),('梅超风',0,'九阴白骨爪',0,1),\
('乔峰',1,'降龙十八掌',0,2),('段誉',1,'六脉神剑',0,2),('虚竹',1,'天山六阳掌',0,2),('王语嫣',0,'神仙姐姐',0,2),('令狐冲',1,'独孤九剑',0,3),('任盈盈',0,'弹琴',0,3),('岳不群',1,'华山剑法',0,3),('东方不败',0,'葵花宝典',0,3),\
('胡斐',1,'胡家刀法',0,4),('苗若兰',0,'黄衣',0,4),('程灵素',0,'医术',0,4),('袁紫衣',1,'六合拳',0,4);


python manage.py shell

>>> from book.models import BookInfo
>>> BookInfo.objects.all()



######## 高级查询 ########


from book.models import BookInfo
from book.models import PeopleInfo

###增加数据

##方式一
book = BookInfo(
    name = 'Django',
    pub_date = '2000-1-1',
    read_count = 10
)
#必须要调用对象的sava()方法才能将保存到数据库中
book.save()

##方式二
BookInfo.objects.create(
    name='测试开发入门',
    pub_date='2020-11-20',
    read_count=10
)

###修改数据

##方式一
book = BookInfo.objects.get(id=6)
book.name = '运维开发入门'
book.save()

##方式二
BookInfo.objects.filter(id=6).update(name='爬虫入门',comment_count=66)

###删除数据

##方式一
book = BookInfo.objects.get(id=6)
book.delete()

##方式二
BookInfo.objects.get(id=5).delete()
BookInfo.objects.filter(id=6).delete()

###查询数据

# get查询单一结果，如果不存在会抛出模型类DoesNotExist异常
try:
    book = BookInfo.objects.get(id=1)
except BookInfo.DoesNotExist:
    print('查询结果不存在')

#all查询所有结果
BookInfo.objects.all()

#count查询结果数量
BookInfo.objects.all().count()
BookInfo.objects.count()

###过滤查询

#实现SQL中的where功能：
#filter过滤出多个结果
#exclude排除掉符合条件剩下的结果
#get过滤单一结果

#模型类名.objects.filter(属性名__运算符=值)    获取n个结果
#模型类名.objects.exclude(属性名__运算符=值)    获取n个结果
#模型类名.objects.get(属性名__运算符=值)    获取1个结果或报错

#查询编号为1的图书
BookInfo.objects.get(id=1)           #简写方式（属性名=值）
BookInfo.objects.get(id__exact=1)    #完整方式
BookInfo.objects.get(pk=1)           #primary key 主键

#BookInfo.objects.get(id=1)      #get得到是一个
#BookInfo.objects.filter(id=1)   #filter得到的是列表

#查询书名包含'湖'的图书
BookInfo.objects.filter(name__contains='湖')

#查询书名以'部'结尾的图书
BookInfo.objects.filter(name__endswith='部')

#查询书名为空的图书
BookInfo.objects.filter(name__isnull=True)

#查询编号为1或3或5的图书
BookInfo.objects.filter(id__in=[1,3,5])
BookInfo.objects.filter(id__in=(1,3,5))

#大于 gt　         great
#大于等于 gte       equal
#小于 lt           little
#小于等于 lte

#查询编号大于3的图书
BookInfo.objects.filter(id__gt=3)

#查询1980年发表的图书
BookInfo.objects.filter(pub_date__year=1980)

#查询1990年1月1日后发表的图书
BookInfo.objects.filter(pub_date__gt='1990-1-1')

### F对象
#使用：2个属性的比较
#模型类名.objects.filter(属性名__运算符=F(‘第二个属性名'))

#查询阅读量大于等于评论量的图书
from django.db.models import F
BookInfo.objects.filter(read_count__gte=F('comment_count'))

#查询阅读量大于2倍评论量的图书
BookInfo.objects.filter(read_count__gte=F('comment_count')*2)

### 并且查询　查询阅读量大于20，并且编号小于3的图书
BookInfo.objects.filter(read_count__gt=20).filter(id__lt=3)
BookInfo.objects.filter(read_count__gt=20,id__lt=3)

### 或者查询
### Q查询
# 或者语法：模型类名.objects.filter(Q(属性名__运算符=值)|Q(属性名__运算符=值)|...)
# 并且语法：模型类名.objects.filter(Q(属性名__运算符=值)&Q(属性名__运算符=值)&...)
# not 非 语法：模型类名.objects.filter(~Q(属性名__运算符=值))

#查询阅读量大于20，或者编号小于3的图书
from django.db.models import Q
BookInfo.objects.filter(Q(read_count__gt=20)|Q(id__lt=3))

#查询编号不等于3的图书
BookInfo.objects.exclude(id=3)
BookInfo.objects.filter(~Q(id=3))

###聚合函数

#模型类名.objects.aggregate(Xxx('字段名'))
from django.db.models import Sum,Max,Min,Avg,Count
BookInfo.objects.aggregate(Sum('read_count'))       #返回结果{'read_count__sum': 126}

###排序
BookInfo.objects.all().order_by('read_count')   #升序
BookInfo.objects.all().order_by('-read_count')  #降序


##关联查询

#查询书籍为1的所有人物信息
book = BookInfo.objects.get(id=1)
book.peopleinfo_set.all()
#PeopleInfo.objects.filter(book=1)

#查询人物为1的书籍信息
person = PeopleInfo.objects.get(id=1)
person.book.name
person.book.read_count

###关联过滤查询
#语法形式
#查询1的数据，条件为n
#模型类名.objects.(关联模型类名小写__字段名__运算符=值)
#查询图书，要求图书人物为"郭靖"
BookInfo.objects.filter(peopleinfo__name__exact='郭靖')
BookInfo.objects.filter(peopleinfo__name='郭靖')

#查询图书，要求图书中人物的描述包含"八"
BookInfo.objects.filter(peopleinfo__description__contains='八')

#查询书名为“天龙八部”的所有人物
PeopleInfo.objects.filter(book__name='天龙八部')            # book是外键，即 book = BookInfo()
PeopleInfo.objects.filter(book__name__exact='天龙八部')

#查询图书阅读量大于30的所有人物
PeopleInfo.objects.filter(book__read_count__gt=30)

###查询集 QuerySet

#惰性执行
#缓存

# >>> [books.id for books in BookInfo.objects.all()]    #每次都从硬盘查询
# >>> [books.id for books in BookInfo.objects.all()]

# >>> books =  BookInfo.objects.all()       #已缓存，多次查询只从硬盘查一次
# >>> [book.id for book in books]
# >>> [book.id for book in books]

###限制查询集

#可以对查询集进行取下标或切片操作，等同于SQL中的limit和offset子句
#注意：不支持负数索引
# >>> BookInfo.objects.all()[0]
# >>> BookInfo.objects.all()[0:2]

###分页
# https://docs.djangoproject.com


###### HttpRequest对象 ######

回想一下，利用HTTP协议向服务器传参有几种途径？
1、提取url的特定部分，如/weather/beijing/2018，可以在服务器端的路由中用正则表达式截取
2、查询字符串(query string)，形如key1=value&key2=value2
3、请求体(body)中发送的数据，比如表单数据 json xml
4、在http报文的头(header)中

### 1、url路径参数

如果想从url中获取值http://127.0.0.1:8000/18/188

应用中 urls.py
from django.urls import path
from book.views import shop
urlpatterns = [
    path('<city_id>/<shop_id>',goods)
]

视图中函数：参数的位置不能错
from django.http import JsonResponse
def shop(request,city_id,shop_id):
    return JsonResponse({'city_id':city_id,'shop_id':shop_id})

### 2、查找字符串　Query String

http://ip:port/path/path/?key1=value1&key2=value2
url 以 ？分割，分为2部分
？前边为　请求路径
？后边为　查询字符串

def shop(request,city_id,shop_id):
    query_params=request.GET
    # print(query_params)
    order=query_params.get('order')
    # order=query_params['order']
    print(order)

    ##<QueryDict>具有字典的特性，还具有一键多值
    order=query_params.getlist('order')
    print(order)

    return HttpResponse('test')

### 3、Form表单

postman:
http://127.0.0.1:8000/register/
username: mao
password: 123

$ curl --location 'http://127.0.0.1:8000/register/' --form 'username="mao"' --form 'password="123"'

### 3、Json数据

postman:（Json是双引号、raw->JSON）
http://127.0.0.1:8000/json/
{
    "name":"mao",
    "age":25
}

### 4、请求头

request.META
request.META['SERVER_PORT']





